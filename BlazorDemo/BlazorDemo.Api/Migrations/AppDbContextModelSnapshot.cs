// <auto-generated />
using System;
using BlazorDemo.Common.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlazorDemo.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlazorDemo.Common.Models.Account.CryptographyKey", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("CryptographyKeys");
                });

            modelBuilder.Entity("BlazorDemo.Common.Models.Account.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("EmailActivationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c136a815-d8ba-40e6-3c6b-08d832fed663"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cb10e98-e066-4302-8795-ec5ff960da5a",
                            Email = "rvnlord@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            LockoutEnd = new DateTimeOffset(new DateTime(2020, 8, 4, 11, 39, 5, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            NormalizedEmail = "RVNLORD@GMAIL.COM",
                            NormalizedUserName = "RVNLORD",
                            PasswordHash = "amlhUzFzczZEazU2LXhlSTVEY0pkRnVmV1cydThTR3RTMndvc2czaWZwVlZNdEJFTWZ3fE1FWUNJUURlRVd1cGN3VTNXZ1JlNFJVNXpDTEFFMWQ0T3loZVFfcVF2ZFFoeURidHFRSWhBSkRDZDd5U2QxSFY5QVpjRldLVjh1ZFY2ZmRNcjYyYVNHcEJiRV9KOWVJWg",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BJUN2FSFJT2VXPGQDWEFIXXJMJL57QJN",
                            TwoFactorEnabled = false,
                            UserName = "rvnlord"
                        },
                        new
                        {
                            Id = new Guid("0862cc5b-5f7b-464f-0bce-08d837e1df7d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f86fb85-ed25-4ea0-95f3-c7b92a034919",
                            Email = "koverss@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "KOVERSS@GMAIL.COM",
                            NormalizedUserName = "KOVERSS",
                            PasswordHash = "QmZ1TExLX0ZhUnNJOUtvQ0hybmNSajh6UWFEeTZYSmxQcGtkblI2MWZHNF9EaUE0Y2xBfE1FWUNJUUNhVmkzM2dQMjh5dGhIN3lPaE5qWGF1WmFZVlNiR2hVUlZxV09LS3pYVHl3SWhBTkxDX0o4YjRwc05VcjJ2MDlxMEZqYWZxTlFlcFBsaDRvYS1OWl80eFljcg",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2XSYZWGZVG6EWBZO3HVQY3ZYGJ3UZQHQ",
                            TwoFactorEnabled = false,
                            UserName = "koverss"
                        },
                        new
                        {
                            Id = new Guid("4da563ce-95be-426e-e3c5-08d839435d17"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcd3823c-2df9-4634-a702-244a2bbe9b25",
                            Email = "tester1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER1@GMAIL.COM",
                            NormalizedUserName = "TESTER1",
                            PasswordHash = "MFVyZWN4SFd1VHF5dDhqRTA3SDM2VFE0SlpQRDVyTzRVZlNNSTZibUNLN3gwTElUbnhNfE1FUUNJR2J6ejNfRDVwYUZrV0gtaFNfb1pFWW9yTl84N3VRZEVwX3hWNzNCMDRGOEFpQTBRaGlRb1pQUUk4SHBBeHplei1lT0RxM3YzdnNGYUFjRG10TTJnQmNfeHc",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2XJF3IQJ6THPX5NSI3WDL7HAR4I3OBBD",
                            TwoFactorEnabled = false,
                            UserName = "tester1"
                        },
                        new
                        {
                            Id = new Guid("20b4514f-c424-4f01-e3c6-08d839435d17"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe9fd3e7-22ba-4688-a399-c722502d753b",
                            Email = "tester2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TESTER2@GMAIL.COM",
                            NormalizedUserName = "TESTER2",
                            PasswordHash = "WHIyN2ROcmNldVllMXBPUlJ4N2VRQWVEYUhObEo3SFZ3ZTZDUEpYd3FFSFRWTGRxcGowfE1FUUNJSFFEb0w2blYzYVdKT1dhR2R4NHNiYnNBZHpfZUhtUkpiUlExZTVfSXBjZUFpQnVGal9GWFduN25KR0tfUFFqR3ZCZWRGc1JzRjNuN3k4Vkx4ZHdlWm12c1E",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6SPNWJWFOWPPBT7PPYHVFLDHTFSF4M32",
                            TwoFactorEnabled = false,
                            UserName = "tester2"
                        });
                });

            modelBuilder.Entity("BlazorDemo.Common.Models.EmployeeManagement.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Payroll"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BlazorDemo.Common.Models.EmployeeManagement.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1980, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "john@test.com",
                            FirstName = "John",
                            Gender = 0,
                            LastName = "Hastings",
                            PhotoPath = "images/john.png"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1981, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "sam@test.com",
                            FirstName = "Sam",
                            Gender = 0,
                            LastName = "Galloway",
                            PhotoPath = "images/sam.jpg"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1979, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "mary@test.com",
                            FirstName = "Mary",
                            Gender = 1,
                            LastName = "Smith",
                            PhotoPath = "images/mary.png"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1982, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            Email = "sara@test.com",
                            FirstName = "Sara",
                            Gender = 1,
                            LastName = "Longway",
                            PhotoPath = "images/sara.png"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83722fe7-0af9-4299-8873-f66a272aa9d6"),
                            ConcurrencyStamp = "24cf91c5-a5ff-48ca-8508-f444f6e060b2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("f708c641-ccbf-4a1b-0171-08d835bdd192"),
                            ConcurrencyStamp = "24cb18b5-90c0-45be-a420-623fb500a958",
                            Name = "Mod",
                            NormalizedName = "MOD"
                        },
                        new
                        {
                            Id = new Guid("1a14b302-84fa-419c-0de3-08d839436a4a"),
                            ConcurrencyStamp = "863b5180-decc-4b2a-967f-9344e8b9f270",
                            Name = "Tester",
                            NormalizedName = "TESTER"
                        },
                        new
                        {
                            Id = new Guid("92f0761c-19f0-490d-dc84-08d83592c976"),
                            ConcurrencyStamp = "48ed9669-9dc0-400a-9920-b76e83a8e7b7",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "View Employees",
                            ClaimValue = "true",
                            UserId = new Guid("0862cc5b-5f7b-464f-0bce-08d837e1df7d")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Edit Employees",
                            ClaimValue = "true",
                            UserId = new Guid("0862cc5b-5f7b-464f-0bce-08d837e1df7d")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "View Employees",
                            ClaimValue = "true",
                            UserId = new Guid("4da563ce-95be-426e-e3c5-08d839435d17")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Edit Employees",
                            ClaimValue = "true",
                            UserId = new Guid("4da563ce-95be-426e-e3c5-08d839435d17")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Edit Employees",
                            ClaimValue = "true",
                            UserId = new Guid("20b4514f-c424-4f01-e3c6-08d839435d17")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Test Things",
                            ClaimValue = "true",
                            UserId = new Guid("c136a815-d8ba-40e6-3c6b-08d832fed663")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Test Things",
                            ClaimValue = "true",
                            UserId = new Guid("4da563ce-95be-426e-e3c5-08d839435d17")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Test Things",
                            ClaimValue = "true",
                            UserId = new Guid("20b4514f-c424-4f01-e3c6-08d839435d17")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c136a815-d8ba-40e6-3c6b-08d832fed663"),
                            RoleId = new Guid("92f0761c-19f0-490d-dc84-08d83592c976")
                        },
                        new
                        {
                            UserId = new Guid("0862cc5b-5f7b-464f-0bce-08d837e1df7d"),
                            RoleId = new Guid("92f0761c-19f0-490d-dc84-08d83592c976")
                        },
                        new
                        {
                            UserId = new Guid("4da563ce-95be-426e-e3c5-08d839435d17"),
                            RoleId = new Guid("92f0761c-19f0-490d-dc84-08d83592c976")
                        },
                        new
                        {
                            UserId = new Guid("20b4514f-c424-4f01-e3c6-08d839435d17"),
                            RoleId = new Guid("92f0761c-19f0-490d-dc84-08d83592c976")
                        },
                        new
                        {
                            UserId = new Guid("0862cc5b-5f7b-464f-0bce-08d837e1df7d"),
                            RoleId = new Guid("f708c641-ccbf-4a1b-0171-08d835bdd192")
                        },
                        new
                        {
                            UserId = new Guid("4da563ce-95be-426e-e3c5-08d839435d17"),
                            RoleId = new Guid("f708c641-ccbf-4a1b-0171-08d835bdd192")
                        },
                        new
                        {
                            UserId = new Guid("c136a815-d8ba-40e6-3c6b-08d832fed663"),
                            RoleId = new Guid("1a14b302-84fa-419c-0de3-08d839436a4a")
                        },
                        new
                        {
                            UserId = new Guid("4da563ce-95be-426e-e3c5-08d839435d17"),
                            RoleId = new Guid("1a14b302-84fa-419c-0de3-08d839436a4a")
                        },
                        new
                        {
                            UserId = new Guid("20b4514f-c424-4f01-e3c6-08d839435d17"),
                            RoleId = new Guid("1a14b302-84fa-419c-0de3-08d839436a4a")
                        },
                        new
                        {
                            UserId = new Guid("c136a815-d8ba-40e6-3c6b-08d832fed663"),
                            RoleId = new Guid("83722fe7-0af9-4299-8873-f66a272aa9d6")
                        },
                        new
                        {
                            UserId = new Guid("4da563ce-95be-426e-e3c5-08d839435d17"),
                            RoleId = new Guid("83722fe7-0af9-4299-8873-f66a272aa9d6")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("BlazorDemo.Common.Models.EmployeeManagement.Employee", b =>
                {
                    b.HasOne("BlazorDemo.Common.Models.EmployeeManagement.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BlazorDemo.Common.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BlazorDemo.Common.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorDemo.Common.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BlazorDemo.Common.Models.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
