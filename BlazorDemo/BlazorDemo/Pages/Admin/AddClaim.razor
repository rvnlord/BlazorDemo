@page "/admin/addclaim/"
@using BlazorDemo.Common.Extensions
@using BlazorDemo.Common.Models.Account.ViewModels
@using BlazorDemo.Common.Models.Admin.ViewModels
@inherits AddClaimBase

@if (IsAuthorized())
{
    <div>
        <EditForm EditContext="EditContext" OnValidSubmit="@FormAdminAddClaim_ValidSubmitAsync">
            <CustomDataAnnotationsValidator @ref="_validator" />
            <div class="row">
                <div class="col-12">
                    <h3>Add Claim</h3>
                    <hr class="mt-10px" />
                </div>
            </div>
            <div class="row">
                <div class="col-xl-2 col-lg-3 col-sm-6 col-12">
                    <label for="inputClaimName" class="col-form-label">@($"{AdminAddClaimVM.GetDisplayName(nameof(AdminAddClaimVM.Name))}:")</label>
                </div>
                <div class="col-xl-3 col-lg-4 col-sm-6 col-12">
                    <InputText @bind-Value="AdminAddClaimVM.Name" id="inputClaimName" class="form-control" placeholder="@($"{AdminAddClaimVM.GetDisplayName(nameof(AdminAddClaimVM.Name))}...")" />
                </div>
                <div class="col-xl-7 col-lg-5 col-12 d-none-if-empty">
                    <CustomValidationMessage For="@(() => AdminAddClaimVM.Name)" class="validation-message-inline-from-lg"></CustomValidationMessage>
                </div>
            </div>
            <div class="row">
                <div class="offset-xl-2 offset-lg-3 col-xl-3 col-lg-4 col-sm-6 col-12">
                    <h4 class="mb-5px" style="color: yellow; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; display: block;">Users:</h4>
                    @if (Users?.Any() != true)
                    {
                        <h6 class="ml-10px" style="color: #ff3333; text-overflow: ellipsis; white-space: nowrap; overflow: hidden; display: block;">&lt; No Users &gt;</h6>
                    }
                    else
                    {
                        var users = Users.Select(u => u.UserName).ToList();
                        for (var i = 0; i < users.Count; i++)
                        {
                            var userName = users[i];
                            var marginClass = i == users.Count - 1 ? string.Empty : "mb-10px";
                            <label class="my-checkbox-container ml-10px @marginClass">
                                @if (userName.In(AdminAddClaimVM.GetUserNames()))
                                {
                                    <input id="cbClaim@(i)" checked="checked" type="checkbox" @onchange="@(async () => await CbUser_CheckedAsync(userName, false))" />
                                }
                                else
                                {
                                    <input id="cbClaim@(i)" type="checkbox" @onchange="@(async () => await CbUser_CheckedAsync(userName, true))" />
                                }
                                <span class="my-checkmark"></span>
                                <label for="cbClaim@(i)" class="my-checkbox-label" style="text-overflow: ellipsis; white-space: nowrap; overflow: hidden; display: block;">@userName</label>
                            </label>
                        }
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-xl-2 col-lg-3 col-sm-5 col-12 offset-xl-2 offset-lg-3 offset-sm-6">
                    <CustomButton Styling="ButtonStyling.Primary" ButtonState="_btnAddNewClaimState">Add New Claim</CustomButton>
                </div>
            </div>
        </EditForm>
    </div>
}